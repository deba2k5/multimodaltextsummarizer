# -*- coding: utf-8 -*-
"""multimodalTextsummarizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ordJ2NG7qUsabH29aARmZ4kFTT6p1Emj
"""

!pip install transformers
!pip install torch
!pip install bert-extractive-summarizer
!pip install spacy
!pip install nltk
!pip install gradio  # for optional web UI
!python -m nltk.downloader punkt
!python -m spacy download en_core_web_sm

from summarizer import Summarizer

def extractive_bert_summary(text):
    model = Summarizer()
    summary = model(text, min_length=60)
    return summary

import nltk
from nltk.tokenize import sent_tokenize

def extractive_nltk_summary(text, max_sentences=3):
    sentences = sent_tokenize(text)
    return ' '.join(sentences[:max_sentences])

from transformers import pipeline

def bart_cnn_summary(text):
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    return summarizer(text, max_length=130, min_length=30, do_sample=False)[0]['summary_text']

def bart_xsum_summary(text):
    summarizer = pipeline("summarization", model="facebook/bart-large-xsum")
    return summarizer(text, max_length=60, min_length=15, do_sample=False)[0]['summary_text']

from transformers import T5Tokenizer, T5ForConditionalGeneration

def t5_summary(text):
    model = T5ForConditionalGeneration.from_pretrained("t5-base")
    tokenizer = T5Tokenizer.from_pretrained("t5-base")
    input_ids = tokenizer("summarize: " + text, return_tensors="pt", max_length=512, truncation=True).input_ids
    output_ids = model.generate(input_ids, max_length=150, min_length=40, length_penalty=2.0, num_beams=4, early_stopping=True)
    summary = tokenizer.decode(output_ids[0], skip_special_tokens=True)
    return summary

import gradio as gr

def summarize(text, method):
    if method == "Extractive (BERT)":
        return extractive_bert_summary(text)
    elif method == "Extractive (NLTK)":
        return extractive_nltk_summary(text)
    elif method == "Abstractive (BART CNN)":
        return bart_cnn_summary(text)
    elif method == "Abstractive (BART XSUM)":
        return bart_xsum_summary(text)
    elif method == "Abstractive (T5)":
        return t5_summary(text)

methods = ["Extractive (BERT)", "Extractive (NLTK)", "Abstractive (BART CNN)", "Abstractive (BART XSUM)", "Abstractive (T5)"]

gr.Interface(fn=summarize, inputs=["text", gr.Dropdown(choices=methods)], outputs="text", title="Text Summarizer with Transformers").launch()